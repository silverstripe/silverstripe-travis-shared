language: php

os: linux

dist: bionic

# Ignore branches created by dependabot - these will be tested in the PR build
branches:
  except:
    - /^dependabot\/.*/

# Always install services for postgres + behat because "services"
# does not "merge" correctly so this cannot be dynamic
services:
  - mysql
  - postgresql
  - xvfb

addons:
  apt:
    packages:
      - tidy

# TODO: try removing DISPLAY + XVFBARGS and see if behat still functions
env:
  global:
    - SS_ENVIRONMENT_TYPE=dev
    - SS_BASE_URL="http://localhost:8080/"
    - DISPLAY=":99"
    - XVFBARGS=":99 -ac -screen 0 1024x768x16"
    # SHIPPABLE is used get codecov to detect that the CI environment is travis, which expects the following
    # env variables to be present: CI, TRAVIS, SHIPPABLE
    # https://github.com/codecov/uploader/blob/master/src/ci_providers/provider_travisci.js#L2
    # SHIPPABLE is not in the travis list of envs variables https://docs.travis-ci.com/user/environment-variables/
    # It's expected that the codecov team will eventually remove SHIPPABLE as a conditional at some point
    - SHIPPABLE=1

cache:
  directories:
    - $HOME/.composer/cache/files

before_script:
  # Dynamically work out COMPOSER_ROOT_VERSION:
  # Numeric branch - 4 / 4.8 => 4.x-dev / 4.8.x-dev
  # Tag - 1.2.3 / 1.2.3-beta1 => 1.2.3 / 1.2.3-beta1
  # github-actions js-deps workflow 'push' run ('pull-request' run will be fine) - pulls/1/update-js-1647804511 => 1.x-dev
  # Non-numeric branch - master / some-branch => dev-master / dev-some-branch
  # $TRAVIS_BRANCH documentation - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables
  - if [[ "$TRAVIS_BRANCH" =~ ^[1-9]$ ]] || [[ "$TRAVIS_BRANCH" =~ ^[1-9]\.[0-9]+$ ]]; then export COMPOSER_ROOT_VERSION="${TRAVIS_BRANCH}.x-dev"; elif [[ "$TRAVIS_BRANCH" =~ ^[1-9]\.[0-9]+\.[0-9]+ ]]; then export COMPOSER_ROOT_VERSION="${TRAVIS_BRANCH}"; elif [[ "$TRAVIS_BRANCH" =~ ^pulls/([0-9\.]+)/.+$ ]]; then export COMPOSER_ROOT_VERSION="${BASH_REMATCH[1]}.x-dev"; else export COMPOSER_ROOT_VERSION="dev-${TRAVIS_BRANCH}"; fi
  - echo "$COMPOSER_ROOT_VERSION"

  # Static definition of INSTALLER_CURRENT_MINOR
  # Important! This needs to be updated after a new minor branch of silverstripe/installer is created!
  # This should include the .x-dev suffix e.g. "4.10.x-dev"
  - INSTALLER_CURRENT_MINOR="4.11.x-dev"

  # Dynamically work out REQUIRE_RECIPE, which is particularly important for running builds on minor branches of 
  # modules included in silverstripe/installer e.g. silverstripe/session-manager
  # Doing this means we don't need to statically define REQUIRE_RECIPE in the modules .travis.yml and keep it up to date after every minor release
  - if [ "$REQUIRE_RECIPE" == "" ]; then if [[ "$COMPOSER_ROOT_VERSION" =~ ^[1-9]\.[0-9]*\.x-dev$ ]]; then REQUIRE_RECIPE="$INSTALLER_CURRENT_MINOR"; echo "Dynamically set REQUIRE_RECIPE to INSTALLER_CURRENT_MINOR $REQUIRE_RECIPE"; else REQUIRE_RECIPE="4.x-dev"; echo "Dynamically set REQUIRE_RECIPE to 4.x-dev"; fi; else echo "Using module set REQUIRE_RECIPE of $REQUIRE_RECIPE"; fi

  # If installer-range.yml has REQUIRE_INSTALLER 4.10.x-dev, and there's a composer requirement for a core lockstepped
  # module of ^4.11 then update REQUIRE_INSTALLER to 4.x-dev
  # NOTE: This is hardcoded with the expectation that travis CI will be replaced by github actions CI
  # before 4.12 starts being a thing
  - if [ "$REQUIRE_INSTALLER" == " 4.10.x-dev" ]; then REQUIRE_INSTALLER=$(php -r '$ms=explode(" ","silverstripe/framework silverstripe/cms silverstripe/assets silverstripe/admin silverstripe/versioned silverstripe/reports silverstripe/errorpage silverstripe/siteconfig silverstripe/asset-admin silverstripe/versioned-admin silverstripe/campaign-admin");$r=json_decode(file_get_contents("composer.json"))->{"require"};foreach($ms as $m){if(($r->{$m}??0)==="^4.11"){echo "4.x-dev";die;}};echo "4.10.x-dev";'); fi

  # BEHAT
  # Remove preinstalled Chrome (google-chrome)
  # this would conflict with our chromium-browser installation
  # and its version is incompatible with chromium-chromedriver
  - if [[ $BEHAT_TEST ]]; then sudo apt-get remove -y --purge google-chrome-stable || true; fi

  # Decide which version of chromium you want
  # A) Comment these two lines to get the stable version of chromium from
  #    https://packages.ubuntu.com/bionic/chromium-browser
  # B) Uncomment these two lines to get the beta version of chromium from
  #    https://launchpad.net/~chromium-team/+archive/ubuntu/beta
  #    This can be helpful to resolve any chromium specific bugs
  # - if [[ $BEHAT_TEST ]]; then sudo add-apt-repository -y ppa:chromium-team/beta; fi
  # - if [[ $BEHAT_TEST ]]; then sudo apt-get -q update; fi

  # Install chromium and chromedriver
  - if [[ $BEHAT_TEST ]]; then sudo apt-get install -y chromium-browser chromium-chromedriver; fi

  # PHPENV
  - phpenv rehash
  - phpenv config-rm xdebug.ini || true
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then memlimit='8192M'; else memlimit='4096M'; fi
  - echo "memory_limit = ${memlimit}" >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
  - echo 'always_populate_raw_post_data = -1' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini

  # COMPOSER
  # install $COMPOSER_VERSION if defined, otherwise use Composer v1 with PHP <= 7.3, Composer v2 for >= 7.3
  - if [ $COMPOSER_VERSION ]; then composer self-update "$COMPOSER_VERSION"; elif [ $(php -r 'echo (int) version_compare(phpversion(), "7.3.0", "<=");') = "1" ]; then composer self-update 1.9.3; else composer self-update; fi
  - composer --version
  - composer validate
  - PHPUNIT9=$(php -r '$rd=json_decode(file_get_contents("composer.json"))->{"require-dev"};$pu=$rd->{"phpunit/phpunit"}??"";$rt=$rd->{"silverstripe/recipe-testing"}??"";echo ($pu=="^9"||$pu=="^9.5"||$rt=="dev-two"||$rt=="^2")?1:0;')
  - echo "PHPUNIT9 is $PHPUNIT9"
  - RT2=$(php -r '$rd=json_decode(file_get_contents("composer.json"))->{"require-dev"};$rt=$rd->{"silverstripe/recipe-testing"}??"";echo $rt=="^2"?1:0;')
  - echo "RT2 is $RT2"
  # Ensure ^2 version of recipe-testing is used for phpunit9
  # https://github.com/silverstripe/silverstripe-travis-shared/blob/master/config/jobs/self-range-behat.yml
  # will require recipe-testing:^1 and this is still required for old branches 4.9 and less, though newer branches 4.10 and above need ^2
  - if [[ $PHPUNIT9 == 1 && "$REQUIRE_RECIPE_TESTING" != "" ]]; then composer require silverstripe/recipe-testing=^2 --dev --no-update --prefer-dist; fi
  - if [[ $DB == PGSQL && $(php -r 'echo json_decode(file_get_contents("composer.json"))->name;') != "silverstripe/postgresql" ]]; then composer require --no-update silverstripe/postgresql:^2 --no-update --prefer-dist; fi
  - if [[ $BEHAT_TEST ]]; then composer require --no-update silverstripe/behat-extension:^4 silverstripe/serve:^2  --prefer-dist; fi;
  - if [[ $REQUIRE_RECIPE_CORE ]]; then composer require silverstripe/recipe-core="$REQUIRE_RECIPE_CORE" --no-update --prefer-dist; fi
  - if [[ $REQUIRE_CWP_CWP_RECIPE_CMS ]]; then composer require cwp/cwp-recipe-cms="$REQUIRE_CWP_CWP_RECIPE_CMS" --no-update --prefer-dist; fi
  - if [[ $REQUIRE_INSTALLER ]]; then composer require silverstripe/installer="$REQUIRE_INSTALLER" --no-update --prefer-dist; fi
  - if [ "$REQUIRE_RECIPE" != "" ] && [ "$REQUIRE_RECIPE_CORE" == "" ] && [ "$REQUIRE_CWP_CWP_RECIPE_CMS" == "" ] && [ "$REQUIRE_INSTALLER" == "" ] && [ $(php -r 'echo json_decode(file_get_contents("composer.json"))->name;') != "silverstripe/installer" ]; then composer require silverstripe/installer="$REQUIRE_RECIPE" --no-update --prefer-dist; fi
  - if [[ $REQUIRE_RECIPE_TESTING ]] && [ $RT2 == 0 ]; then composer require silverstripe/recipe-testing="$REQUIRE_RECIPE_TESTING" --dev --no-update --prefer-dist; fi
  - if [[ $REQUIRE_FRAMEWORKTEST ]]; then composer require silverstripe/frameworktest="$REQUIRE_FRAMEWORKTEST" --dev --no-update --prefer-dist; fi
  - if [[ $REQUIRE_CWP_STARTER_THEME ]]; then composer require cwp/starter-theme="$REQUIRE_CWP_STARTER_THEME" --no-update --prefer-dist; fi
  # $REQUIRE_GRAPHQL needs to happen BEFORE $REQUIRE_EXTRA so that graphql 4 is more likely to install to increase
  # our level of test coverage.  This may lead to the installation of previous requirements that use graphql that did
  # not set a graphql contraint and were not graphql 4 compatible such as elemental 4.4.1 - in this scenario set
  # REQUIRE_EXTRA elemental to 4.x-dev or a stable version of elemental ^4.6 once that has been released
  - if [[ $REQUIRE_GRAPHQL && $(php -r 'echo json_decode(file_get_contents("composer.json"))->name;') != "silverstripe/graphql" ]]; then composer require silverstripe/graphql="$REQUIRE_GRAPHQL" --no-update --prefer-dist; fi
  # $REQUIRE_EXTRA needs to NOT be surronded by double quotes, otherwise requiring multiple modules will not work
  # if they have carets in their version contraint
  - if [[ $REQUIRE_EXTRA ]] ; then composer require --no-update $REQUIRE_EXTRA; fi
  - if [[ $COW_TEST && -f .cow.json ]]; then composer require --no-update silverstripe/cow dev-master $COMPOSER_INSTALL_ARG; fi

  # Prevent older required modules that still have sminnee/phpunit from installing it
  # while at the same time still letting it install on old branches e.g. 4.9 and below
  - if [ $PHPUNIT9 == 1 ]; then php -r "\$j=json_decode(file_get_contents('composer.json'));\$j->replace=json_decode('{\"sminnee/phpunit\":\"*\",\"sminnee/phpunit-mock-objects\":\"*\"}');file_put_contents('composer.json', json_encode(\$j, JSON_PRETTY_PRINT + JSON_UNESCAPED_SLASHES));"; fi

  # Ensure composer.json has prefer-stable true and minimum-stability dev
  - php -r '$j=json_decode(file_get_contents("composer.json"));$j->{"prefer-stable"}=true;$j->{"minimum-stability"}="dev";file_put_contents("composer.json",json_encode($j,192));'

  # Enable plugins
  - composer config allow-plugins.composer/installers true
  - composer config allow-plugins.silverstripe/recipe-plugin true
  - composer config allow-plugins.silverstripe/vendor-plugin true

  - if [[ $(composer validate 2>&1 | tr '\n' ' ') =~ ' is valid' ]]; then cat composer.json; fi

  # Install with --prefer-source to ensure that admin javascript (which has export-ignore in .gitattributes) is installed so that NPM_TEST works properly
  # $COMPOSER_INSTALL_ARG is sometimes --prefer-lowest which is only supported by `composer update`, not `composer install`
  # Modules do not have composer.lock files, so `composer update` is the same speed as `composer install`
  - composer update --prefer-source --no-interaction --no-progress --optimize-autoloader --verbose --profile $COMPOSER_INSTALL_ARG
  - composer show

  # Remove vendor unit tests files that were installed because of the use of --prefer-source
  # Some older silverstripe vendor modules may still have the phpunit5 setUp() signatures without :void which when loaded will throw fatal PHP errors.
  # We cannot simply get rid of the 'tests' folders because behat requires vendor/silverstripe/[framework|cms]/tests/behat/serve-bootstrap.php
  # Recipes are excluded because the unit tests they run are in the required modules, and there's an assumption they'll require a compatible minor branch of the module
  # Make an exception for 'ExtendTest.php' which is a misnamed TestOnly non-test class
  - RECIPE=$(php -r "echo preg_match('#^silverstripe/(recipe|silverstripe-installer)#', '$TRAVIS_REPO_SLUG')?1:0;")
  - echo "RECIPE - $RECIPE"
  - if [ $RECIPE == 0 ]; then php -r 'foreach (["silverstripe", "cwp", "symbiote", "dnadesign", "tractorcow", "bringyourownideas", "colymba"] as $v) { $d = "vendor/$v"; if (!is_dir($d)) continue; foreach (explode("\n", shell_exec("find $d | grep \/tests\/ | grep [a-zA-Z0-9]Test.php")) as $f) { if (preg_match("#ExtendTest\.php#", $f)) continue; if (is_file($f)) unlink($f); } }'; fi
  # Also remove a few other file that don't match the *Test.php convention and extends SapphireTest
  - if [ $RECIPE == 0 ] && [ -f vendor/silverstripe/assets/tests/php/FilenameParsing/FileIDHelperTester.php ]; then rm vendor/silverstripe/assets/tests/php/FilenameParsing/FileIDHelperTester.php; fi
  - if [ $RECIPE == 0 ] && [ -f vendor/silverstripe/framework/tests/php/Forms/NullableFieldTests.php ]; then rm vendor/silverstripe/framework/tests/php/Forms/NullableFieldTests.php; fi
  - if [ $RECIPE == 0 ] && [ -f vendor/silverstripe/graphql/tests/Middleware/MiddlewareProcessTestBase.php ]; then rm vendor/silverstripe/graphql/tests/Middleware/MiddlewareProcessTestBase.php; fi
  # Rebuild composer classloader
  - composer dumpautoload -o

  # NPM
  # This needs to happen after composer update
  - if [[ -d vendor/silverstripe/admin ]]; then admin_installed=1; else admin_installed=0; fi
  - if [[ $NPM_TEST ]]; then rm -rf client/dist; fi
  - if [[ $NPM_TEST ]]; then nvm install; fi
  - if [[ $NPM_TEST ]]; then nvm use; fi
  - if [[ $NPM_TEST ]]; then npm install -g yarn; fi
  - if [[ $NPM_TEST ]]; then yarn install --network-concurrency 1; fi
  - if [[ $NPM_TEST && $admin_installed == 1 ]]; then cd vendor/silverstripe/admin; fi
  - if [[ $NPM_TEST && $admin_installed == 1 ]]; then yarn install --network-concurrency 1; fi
  - if [[ $NPM_TEST && $admin_installed == 1 ]]; then cd ../../..; fi

  # Start behat services
  # This needs to happen after composer update
  - if [[ -d vendor/silverstripe/cms ]]; then cms_installed=1; else cms_installed=0; fi
  - if [[ $BEHAT_TEST ]]; then mkdir artifacts; fi
  - if [[ $BEHAT_TEST ]]; then cp composer.json artifacts/; fi
  - if [[ $BEHAT_TEST ]]; then cp composer.lock artifacts/; fi
  - if [[ $BEHAT_TEST ]]; then sh -e /etc/init.d/xvfb start; sleep 3; fi
  - if [[ $BEHAT_TEST ]]; then (chromedriver > artifacts/chromedriver.log 2>&1 &); fi
  - if [[ $BEHAT_TEST && $cms_installed == 1 ]]; then (vendor/bin/serve --bootstrap-file vendor/silverstripe/cms/tests/behat/serve-bootstrap.php &> artifacts/serve.log &); fi
  # The following line is used for testing the cms module itself
  - if [[ $BEHAT_TEST && $cms_installed == 0 ]]; then (vendor/bin/serve --bootstrap-file tests/behat/serve-bootstrap.php &> artifacts/serve.log &); fi

  # codecov
  # https://about.codecov.io/blog/introducing-codecovs-new-uploader/
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import; fi
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then curl -Os https://uploader.codecov.io/latest/codecov-linux; fi
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM; fi
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM.sig; fi
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then gpg --verify codecov-linux.SHA256SUM.sig codecov-linux.SHA256SUM; fi
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then shasum -a 256 -c codecov-linux.SHA256SUM; fi
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then chmod +x codecov-linux; fi

script:
  # PHPUNIT
  - if [[ "$PHPUNIT_TEST" != "" && "$PHPUNIT_SUITE" == "" ]]; then vendor/bin/phpunit --fail-on-warning; fi
  - if [[ "$PHPUNIT_TEST" != "" && "$PHPUNIT_SUITE" != "" ]]; then vendor/bin/phpunit --fail-on-warning --testsuite $PHPUNIT_SUITE; fi

  # PHPUNIT_COVERAGE
  - if [[ "$PHPUNIT_COVERAGE_TEST" != "" && "$PHPUNIT_COVERAGE_SUITE" == "" ]]; then phpdbg -qrr vendor/bin/phpunit --fail-on-warning --coverage-clover=coverage.xml; fi
  - if [[ "$PHPUNIT_COVERAGE_TEST" != "" && "$PHPUNIT_COVERAGE_SUITE" != "" ]]; then phpdbg -qrr vendor/bin/phpunit --fail-on-warning --testsuite $PHPUNIT_COVERAGE_SUITE --coverage-clover=coverage.xml; fi

  # BEHAT
  - if [[ $BEHAT_TEST ]]; then vendor/bin/behat $BEHAT_SUITE; fi

  # PHPCS
  - if [[ $PHPCS_TEST && -f phpcs.xml.dist ]]; then vendor/bin/phpcs; fi

  # PHPSTAN
  - if [[ $PHPSTAN_TEST && -f phpstan.neon.dist ]]; then vendor/bin/phpstan analyse; fi

  # NPM
  - if [[ $NPM_TEST ]]; then yarn run build; fi
  - if [[ $NPM_TEST ]]; then git diff-files --quiet -w --relative=client; fi
  - if [[ $NPM_TEST ]]; then git diff --name-status --relative=client; fi
  - if [[ $NPM_TEST ]]; then yarn run test; fi
  - if [[ $NPM_TEST ]]; then yarn run lint; fi
  
  # Validate cow schema
  - if [[ $COW_TEST && -f .cow.json ]]; then vendor/bin/cow schema:validate; fi

after_success:
  # codecov
  - if [[ $PHPUNIT_COVERAGE_TEST ]]; then ./codecov-linux -f coverage.xml; fi
  

after_failure:
  # BEHAT
  - if [[ $BEHAT_TEST ]]; then php ./vendor/silverstripe/framework/tests/behat/travis-upload-artifacts.php --if-env BEHAT_TEST,ARTIFACTS_BUCKET,ARTIFACTS_KEY,ARTIFACTS_SECRET --target-path $TRAVIS_REPO_SLUG/$TRAVIS_BUILD_ID/$TRAVIS_JOB_ID --artifacts-base-url https://s3.amazonaws.com/$ARTIFACTS_BUCKET/ --artifacts-path ./artifacts/; fi
